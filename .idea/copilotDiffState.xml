<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Exiobase Explorer&#10;&#10;&gt; **Hinweis:** Dieses Projekt befindet sich noch in der Entwicklung.&#10;&#10;Ein Python-Tool zur Analyse von Exiobase-Daten mit Modulen für Input-Output-Systeme, Impact-Analysen und Supply-Chain-Management.&#10;&#10;---&#10;&#10;## Features&#10;&#10;- **IOSystem Modul**: Lädt und verarbeitet Input-Output-Daten aus Exiobase.&#10;- **SupplyChain Modul**: Modelliert und analysiert Lieferketten mit hierarchischen Strukturen.&#10;&#10;---&#10;&#10;## Installation&#10;&#10;1. **Repository klonen**&#10;   ```bash&#10;   git clone https://github.com/JonasLmbt/exiobase_explorer.git&#10;   cd exiobase_explorer&#10;   ```&#10;&#10;2. **Virtuelle Umgebung erstellen (empfohlen)**&#10;   ```bash&#10;   python -m venv venv&#10;   # Windows:&#10;   venv\Scripts\activate&#10;   # macOS/Linux:&#10;   source venv/bin/activate&#10;   ```&#10;&#10;3. **Abhängigkeiten installieren**&#10;   ```bash&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;---&#10;&#10;## Nutzung&#10;&#10;1. Lade die pxp-Version der Datenbank von Exiobase herunter und lege sie im Ordner `exiobase` ab (Dateinamen nicht ändern): [Exiobase Datenbank herunterladen](https://zenodo.org/records/14869924)&#10;&#10;2. Richte die Fast-Load-Datenbanken ein:&#10;   ```bash&#10;   python setup.py&#10;   ```&#10;&#10;3. Starte das Tool:&#10;   ```bash&#10;   python main.py&#10;   ```&#10;&#10;---&#10;&#10;## Module&#10;&#10;- **IOSystem**&#10;  - Laden und Verarbeiten von Input-Output-Daten aus Exiobase&#10;  - Verwaltung von Datenbanken und Berechnung von IO-Matrizen&#10;&#10;- **SupplyChain**&#10;  - Modellierung und Analyse von Lieferketten mit hierarchischen Strukturen&#10;  - Funktionen zur Verwaltung von Sektoren und wirtschaftlichen Einheiten&#10;&#10;---&#10;" />
              <option name="updatedContent" value="# Exiobase Explorer&#10;&#10;&gt; **Hinweis:** Dieses Projekt befindet sich noch in der Entwicklung.&#10;&#10;Ein Python-Tool zur Analyse von Exiobase-Daten mit Modulen für Input-Output-Systeme, Impact-Analysen und Supply-Chain-Management.&#10;&#10;---&#10;&#10;## Features&#10;&#10;- **IOSystem Modul**: Lädt und verarbeitet Input-Output-Daten aus Exiobase.&#10;- **SupplyChain Modul**: Modelliert und analysiert Lieferketten mit hierarchischen Strukturen.&#10;&#10;---&#10;&#10;## Installation&#10;&#10;1. **Repository klonen**&#10;   ```bash&#10;   git clone https://github.com/JonasLmbt/exiobase_explorer.git&#10;   cd exiobase_explorer&#10;   ```&#10;&#10;2. **Virtuelle Umgebung erstellen (empfohlen)**&#10;   ```bash&#10;   python -m venv venv&#10;   ```&#10;&#10;   **Windows:**&#10;   ```bash&#10;   venv\Scripts\activate&#10;   ```&#10;&#10;   **macOS/Linux:**&#10;   ```bash&#10;   source venv/bin/activate&#10;   ```&#10;&#10;3. **Abhängigkeiten installieren**&#10;   ```bash&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;---&#10;&#10;## Nutzung&#10;&#10;1. Lade die pxp-Version der Datenbank von Exiobase herunter und lege sie im Ordner `exiobase` ab (Dateinamen nicht ändern): [Exiobase Datenbank herunterladen](https://zenodo.org/records/14869924)&#10;&#10;2. Richte die Fast-Load-Datenbanken ein:&#10;   ```bash&#10;   python setup.py&#10;   ```&#10;&#10;3. Starte das Tool:&#10;   ```bash&#10;   python main.py&#10;   ```&#10;&#10;---&#10;&#10;## Module&#10;&#10;- **IOSystem**&#10;  - Laden und Verarbeiten von Input-Output-Daten aus Exiobase&#10;  - Verwaltung von Datenbanken und Berechnung von IO-Matrizen&#10;&#10;- **SupplyChain**&#10;  - Modellierung und Analyse von Lieferketten mit hierarchischen Strukturen&#10;  - Funktionen zur Verwaltung von Sektoren und wirtschaftlichen Einheiten&#10;&#10;---" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/GUI/styles.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/GUI/styles.py" />
              <option name="updatedContent" value="from PyQt5.QtWidgets import QApplication&#10;from PyQt5.QtGui import QPalette, QColor&#10;from PyQt5.QtCore import Qt&#10;&#10;def get_dark_palette():&#10;    &quot;&quot;&quot;Creates a QPalette for a dark theme.&quot;&quot;&quot;&#10;    dark_palette = QPalette()&#10;    dark_palette.setColor(QPalette.Window, QColor(53, 53, 53))&#10;    dark_palette.setColor(QPalette.WindowText, Qt.white)&#10;    dark_palette.setColor(QPalette.Base, QColor(25, 25, 25))&#10;    dark_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))&#10;    dark_palette.setColor(QPalette.ToolTipBase, Qt.white)&#10;    dark_palette.setColor(QPalette.ToolTipText, Qt.white)&#10;    dark_palette.setColor(QPalette.Text, Qt.white)&#10;    dark_palette.setColor(QPalette.Button, QColor(53, 53, 53))&#10;    dark_palette.setColor(QPalette.ButtonText, Qt.white)&#10;    dark_palette.setColor(QPalette.BrightText, Qt.red)&#10;    dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))&#10;    dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))&#10;    dark_palette.setColor(QPalette.HighlightedText, Qt.black)&#10;    return dark_palette&#10;&#10;def get_light_palette():&#10;    &quot;&quot;&quot;Returns the default light palette of the application.&quot;&quot;&quot;&#10;    return QApplication.style().standardPalette()&#10;&#10;DARK_STYLESHEET = &quot;&quot;&quot;&#10;QToolTip { &#10;    color: #ffffff; &#10;    background-color: #2a82da; &#10;    border: 1px solid white; &#10;}&#10;QWidget {&#10;    background-color: #353535;&#10;    color: #ffffff;&#10;}&#10;QGroupBox {&#10;    background-color: #353535;&#10;    border: 1px solid #424242;&#10;    border-radius: 5px;&#10;    margin-top: 1ex; /* leave space at the top for the title */&#10;}&#10;QGroupBox::title {&#10;    subcontrol-origin: margin;&#10;    subcontrol-position: top center; /* position at the top center */&#10;    padding: 0 3px;&#10;    background-color: #353535;&#10;}&#10;QTreeWidget, QTableWidget, QTextEdit {&#10;    background-color: #252525;&#10;    alternate-background-color: #353535;&#10;}&#10;QPushButton {&#10;    border: 1px solid #424242;&#10;    border-radius: 5px;&#10;    padding: 5px;&#10;}&#10;QPushButton:hover {&#10;    background-color: #424242;&#10;}&#10;QPushButton:pressed {&#10;    background-color: #252525;&#10;}&#10;&quot;&quot;&quot;&#10;&#10;def apply_dark_theme(app):&#10;    &quot;&quot;&quot;Applies the dark theme to the application.&quot;&quot;&quot;&#10;    app.setStyle(&quot;Fusion&quot;)&#10;    app.setPalette(get_dark_palette())&#10;    app.setStyleSheet(DARK_STYLESHEET)&#10;&#10;def apply_light_theme(app):&#10;    &quot;&quot;&quot;Applies the light theme to the application.&quot;&quot;&quot;&#10;    app.setStyle(&quot;Fusion&quot;)&#10;    app.setPalette(get_light_palette())&#10;    app.setStyleSheet(&quot;&quot;)&#10;&#10;def apply_system_theme(app):&#10;    &quot;&quot;&quot;Detects and applies the system's current theme.&quot;&quot;&quot;&#10;    try:&#10;        import darkdetect&#10;        if darkdetect.isDark():&#10;            apply_dark_theme(app)&#10;        else:&#10;            apply_light_theme(app)&#10;    except ImportError:&#10;        # Fallback to light theme if darkdetect is not installed&#10;        apply_light_theme(app)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>